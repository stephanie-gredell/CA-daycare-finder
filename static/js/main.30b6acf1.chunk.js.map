{"version":3,"sources":["Detail.js","App.js","serviceWorker.js","index.js"],"names":["Detail","props","state","detail","fetch","this","number","then","res","json","result","console","log","setState","FacilityDetail","className","TOTTYPEA","TOTTYPEB","React","Component","App","centers","handleSubmit","bind","handleChange","event","preventDefault","zip","FACILITYARRAY","sort","a","b","FACILITYNAME","target","value","onSubmit","onChange","type","placeholder","name","required","map","center","key","FACILITYNUMBER","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kQAmCeA,E,YA/Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,OAAQ,MAJO,E,iFAQE,IAAD,OAClBC,MAAM,qEAAD,OAAsEC,KAAKJ,MAAMK,SACrFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEV,OAAQO,EAAOI,qB,+BAIjC,OACE,6BACCT,KAAKH,MAAMC,QACV,yBAAKY,UAAU,cACb,sDAA4BV,KAAKH,MAAMC,OAAOa,UAC9C,sDAA4BX,KAAKH,MAAMC,OAAOc,gB,GAxBnCC,IAAMC,WCsDZC,G,kBAnDb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXmB,QAAS,MAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,0EAWNE,GAAQ,IAAD,OAClBA,EAAMC,iBAENtB,MAAM,6GAAD,OAA8GC,KAAKH,MAAMyB,IAAzH,qBACJpB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACJ,EAAKG,SAAS,CAACQ,QAASX,EAAOkB,cAAcC,KAAK,SAASC,EAAGC,GAC5D,OAAOA,EAAEC,aAAeF,EAAEE,cAAiB,EAAI,U,mCAKxCP,GACXpB,KAAKQ,SAAS,CAACc,IAAKF,EAAMQ,OAAOC,U,+BAIjC,OACE,yBAAKnB,UAAU,OAEf,0BAAMoB,SAAU9B,KAAKiB,aAAcc,SAAU/B,KAAKmB,aAAcT,UAAU,gBACxE,2BAAOsB,KAAK,OAAOC,YAAY,iCAAiCC,KAAK,QAAQxB,UAAU,aAAayB,UAAQ,KAG7GnC,KAAKH,MAAMmB,SACR,wBAAIN,UAAU,wBACXV,KAAKH,MAAMmB,QAAQoB,IAAI,SAAAC,GAAM,OAC9B,wBAAIC,IAAKD,EAAOE,gBACd,2BAAG,gCAASF,EAAOV,eACnB,kBAAC,EAAD,CAAQ1B,OAAQoC,EAAOE,0B,GAzCnB1B,IAAMC,YCQJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC,gB","file":"static/js/main.30b6acf1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Detail extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      detail: null\n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://secure.dss.ca.gov/ccld/TransparencyAPI/api/FacilityDetail/${this.props.number}`)\n    .then(res => res.json())\n    .then(result => {\n      console.log(result);\n      this.setState({ detail: result.FacilityDetail })\n    });\n  }\n  render() {\n    return (\n      <div>\n      {this.state.detail &&\n        <div className=\"violations\">\n          <p># of Type A Violations: {this.state.detail.TOTTYPEA}</p>\n          <p># of Type B Violations: {this.state.detail.TOTTYPEB}</p>\n        </div>\n      }\n      </div>\n    );\n  }\n\n}\n\nexport default Detail;\n","import React from 'react';\nimport Detail from './Detail'\nimport \"./App.css\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      centers: null\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    fetch(`https://secure.dss.ca.gov/ccld/TransparencyAPI/api/FacilitySearch?facType=850&facility=&Street=&city=&zip=${this.state.zip}&county=&facnum=`)\n    .then(res => res.json())\n    .then(result => {\n      this.setState({centers: result.FACILITYARRAY.sort(function(a, b) {\n        return b.FACILITYNAME > a.FACILITYNAME  ? -1 : 1\n      })});\n    });\n  }\n\n  handleChange(event) {\n    this.setState({zip: event.target.value});\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n\n      <form onSubmit={this.handleSubmit} onChange={this.handleChange} className=\"search__form\">\n        <input type=\"text\" placeholder=\"Enter zip code and press enter\" name=\"query\" className=\"app_search\" required />\n      </form>\n\n      {this.state.centers &&\n          <ul className=\"search__results-list\">\n            {this.state.centers.map(center => (\n            <li key={center.FACILITYNUMBER}>\n              <p><strong>{center.FACILITYNAME}</strong></p>\n              <Detail number={center.FACILITYNUMBER} />\n            </li>\n            ))}\n          </ul>\n      }\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}